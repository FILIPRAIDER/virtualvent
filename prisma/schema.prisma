generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model categorias {
  id          BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  uuid        String?     @unique(map: "categorias_uuid_unique") @db.Char(36)
  nombre      String      @db.VarChar(255)
  descripcion String      @db.VarChar(255)
  imagen      String?     @db.VarChar(255)
  user_id     BigInt      @db.UnsignedBigInt
  deleted_at  DateTime?   @db.Timestamp(0)
  created_at  DateTime?   @db.Timestamp(0)
  updated_at  DateTime?   @db.Timestamp(0)
  users       users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "categorias_user_id_foreign")
  productos   productos[]

  @@index([user_id], map: "categorias_user_id_foreign")
}

model ciudades {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  uuid            String?       @unique(map: "ciudades_uuid_unique") @db.Char(36)
  nombre          String        @db.VarChar(255)
  departamento_id BigInt        @db.UnsignedBigInt
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  departamentos   departamentos @relation(fields: [departamento_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ciudades_departamento_id_foreign")
  direcciones     direcciones[]

  @@index([departamento_id], map: "ciudades_departamento_id_foreign")
}

model corporativos {
  id           BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  uuid         String?       @unique(map: "corporativos_uuid_unique") @db.Char(36)
  nit          String        @unique(map: "corporativos_nit_unique") @db.VarChar(255)
  razon_social String        @db.VarChar(255)
  email        String        @unique(map: "corporativos_email_unique") @db.VarChar(255)
  telefono     String        @db.VarChar(255)
  deleted_at   DateTime?     @db.Timestamp(0)
  created_at   DateTime?     @db.Timestamp(0)
  updated_at   DateTime?     @db.Timestamp(0)
  user_id      BigInt        @db.UnsignedBigInt
  logo         String        @db.VarChar(255)
  users        users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "corporativos_user_id_foreign")
  direcciones  direcciones[]
  hoja_costos  hoja_costos[]
  productos    productos[]

  @@index([user_id], map: "corporativos_user_id_foreign")
}

model departamentos {
  id          BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  uuid        String?       @unique(map: "departamentos_uuid_unique") @db.Char(36)
  nombre      String        @db.VarChar(255)
  pais_id     BigInt        @db.UnsignedBigInt
  created_at  DateTime?     @db.Timestamp(0)
  updated_at  DateTime?     @db.Timestamp(0)
  ciudades    ciudades[]
  paises      paises        @relation(fields: [pais_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "departamentos_pais_id_foreign")
  direcciones direcciones[]

  @@index([pais_id], map: "departamentos_pais_id_foreign")
}

model direcciones {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  uuid            String?       @unique(map: "direcciones_uuid_unique") @db.Char(36)
  corporativo_id  BigInt        @db.UnsignedBigInt
  pais_id         BigInt        @db.UnsignedBigInt
  departamento_id BigInt        @db.UnsignedBigInt
  ciudad_id       BigInt        @db.UnsignedBigInt
  detalle         String        @db.VarChar(255)
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  ciudades        ciudades      @relation(fields: [ciudad_id], references: [id], onUpdate: NoAction, map: "direcciones_ciudad_id_foreign")
  corporativos    corporativos  @relation(fields: [corporativo_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "direcciones_corporativo_id_foreign")
  departamentos   departamentos @relation(fields: [departamento_id], references: [id], onUpdate: NoAction, map: "direcciones_departamento_id_foreign")
  paises          paises        @relation(fields: [pais_id], references: [id], onUpdate: NoAction, map: "direcciones_pais_id_foreign")

  @@index([ciudad_id], map: "direcciones_ciudad_id_foreign")
  @@index([corporativo_id], map: "direcciones_corporativo_id_foreign")
  @@index([departamento_id], map: "direcciones_departamento_id_foreign")
  @@index([pais_id], map: "direcciones_pais_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model imagenes {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  uuid        String?   @unique(map: "imagenes_uuid_unique") @db.Char(36)
  producto_id BigInt    @db.UnsignedBigInt
  imagen      String    @db.VarChar(255)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  productos   productos @relation(fields: [producto_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "imagenes_producto_id_foreign")

  @@index([producto_id], map: "imagenes_producto_id_foreign")
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model paises {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  uuid          String?         @unique(map: "paises_uuid_unique") @db.Char(36)
  nombre        String          @db.VarChar(255)
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  departamentos departamentos[]
  direcciones   direcciones[]
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model productos {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  uuid           String?      @unique(map: "productos_uuid_unique") @db.Char(36)
  nombre         String       @db.VarChar(255)
  descripcion    String       @db.Text
  stock          Int
  precio         Decimal      @db.Decimal(10, 2)
  categoria_id   BigInt       @db.UnsignedBigInt
  corporativo_id BigInt       @db.UnsignedBigInt
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  deleted_at     DateTime?    @db.Timestamp(0)
  unidad         String       @db.VarChar(255)
  imagenes       imagenes[]
  item_orden     item_orden[]
  categorias     categorias   @relation(fields: [categoria_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "productos_categoria_id_foreign")
  corporativos   corporativos @relation(fields: [corporativo_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "productos_corporativo_id_foreign")

  @@index([categoria_id], map: "productos_categoria_id_foreign")
  @@index([corporativo_id], map: "productos_corporativo_id_foreign")
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model tipousuarios {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String?   @unique(map: "tipousuarios_uuid_unique") @db.Char(36)
  codigo     Int
  nombre     String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  users      users[]
}

model users {
  id                BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  uuid              String?        @unique(map: "users_uuid_unique") @db.Char(36)
  name              String         @db.VarChar(255)
  email             String         @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?      @db.Timestamp(0)
  password          String         @db.VarChar(255)
  remember_token    String?        @db.VarChar(100)
  created_at        DateTime?      @db.Timestamp(0)
  updated_at        DateTime?      @db.Timestamp(0)
  deleted_at        DateTime?      @db.Timestamp(0)
  tipousuario_id    BigInt?        @db.UnsignedBigInt
  categorias        categorias[]
  clientes          clientes?
  corporativos      corporativos[]
  ordenes           ordenes[]
  tipousuarios      tipousuarios?  @relation(fields: [tipousuario_id], references: [id], onUpdate: NoAction, map: "users_tipousuario_id_foreign")

  @@index([tipousuario_id], map: "users_tipousuario_id_foreign")
}

model hoja_costos {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  uuid           String?      @unique(map: "hoja_costos_uuid_unique") @db.Char(36)
  nombre         String       @db.VarChar(255)
  cantidad       Int          @db.UnsignedInt
  margen         Decimal      @db.Decimal(6, 2)
  materiales     Json
  labores        Json
  indirectos     Json
  costo_total    Decimal      @default(0.00) @db.Decimal(10, 2)
  costo_unitario Decimal      @default(0.0000) @db.Decimal(10, 4)
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  corporativo_id BigInt       @db.UnsignedBigInt
  corporativos   corporativos @relation(fields: [corporativo_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "hoja_costos_corporativo_id_foreign")

  @@index([corporativo_id], map: "hoja_costos_corporativo_id_foreign")
}

model item_orden {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  uuid        String?   @unique(map: "item_orden_uuid_unique") @db.Char(36)
  cantidad    Int
  precio      Decimal   @db.Decimal(10, 2)
  producto_id BigInt    @db.UnsignedBigInt
  orden_id    BigInt    @db.UnsignedBigInt
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  ordenes     ordenes   @relation(fields: [orden_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "item_orden_orden_id_foreign")
  productos   productos @relation(fields: [producto_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "item_orden_producto_id_foreign")

  @@index([orden_id], map: "item_orden_orden_id_foreign")
  @@index([producto_id], map: "item_orden_producto_id_foreign")
}

model ordenes {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  uuid          String          @unique(map: "ordenes_uuid_unique") @db.Char(36)
  total         Decimal         @db.Decimal(10, 2)
  num_items     Int
  pagado        Boolean         @default(false)
  fecha_pago    DateTime        @db.Date
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  user_id       BigInt          @db.UnsignedBigInt
  intentos_pago intentos_pago[]
  item_orden    item_orden[]
  user          users           @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "ordenes_user_id_fkey")
}

model clientes {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  uuid             String    @unique(map: "clientes_uuid_unique") @db.Char(36)
  user_id          BigInt    @unique(map: "clientes_user_id_unique") @db.UnsignedBigInt
  primer_nombre    String    @db.VarChar(255)
  segundo_nombre   String?   @db.VarChar(255)
  primer_apellido  String    @db.VarChar(255)
  segundo_apellido String?   @db.VarChar(255)
  tipo_documento   String    @db.VarChar(20)
  numero_documento String    @db.VarChar(50)
  telefono         String    @db.VarChar(50)
  sexo             String    @db.VarChar(10)
  fecha_nacimiento DateTime  @db.Date
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "clientes_user_id_foreign")

  @@index([user_id], map: "clientes_user_id_foreign")
}

model intentos_pago {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String    @unique(map: "uuid") @db.Char(36)
  orden_id   BigInt    @db.UnsignedBigInt
  pagado     Boolean?  @default(false)
  estado     String?   @default("pendiente") @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  ordenes    ordenes   @relation(fields: [orden_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_intentos_orden")

  @@index([orden_id], map: "fk_intentos_orden")
}
